#log4j.rootLogger = [level],appenderName,appenderName2,...
#level是日志记录的优先级，分为OFF,TRACE,DEBUG,INFO,WARN,ERROR,FATAL,ALL
##Log4j建议只使用四个级别，优先级从低到高分别是DEBUG,INFO,WARN,ERROR
#通过在这里定义的级别，您可以控制到应用程序中相应级别的日志信息的开关
#比如在这里定义了INFO级别，则应用程序中所有DEBUG级别的日志信息将不被打印出来

log4j.rootLogger=DEBUG, debug

#Log4j针对不同包指定level：
#一般在生产环境中应用系统，日志级别调整为INFO以避免过多的输出日志。
#但某些时候，需要跟踪具体问题，那么就得打开DEBUG日志。
#但是如果打开log4j.rootLogger，则需要的信息就会淹没在日志的海洋中。
#此时，需要单独指定某个或者某些Logger的日志级别为DEBUG，而rootLogger保持INFO不变。
#参考配置如下（指定com.ssm.maven.core.admin类的日志输出）
#分包设置，admin与service包中的日志输出分离

log4j.logger.com.guang.module.account=INFO,account
log4j.logger.com.guang.module.user=INFO,user

log4j.logger.org.springframework=OFF
log4j.logger.org.mybatis.spring=ON
log4j.logger.org.springframework.context.annotation=OFF

log4j.appender.account=org.apache.log4j.DailyRollingFileAppender
log4j.appender.account.layout=org.apache.log4j.PatternLayout
log4j.appender.account.layout.ConversionPattern= [%d{HH\:mm\:ss}] %c{1} - %m%n
log4j.appender.account.datePattern='.'yyyy-MM-dd
log4j.appender.account.Threshold = INFO
log4j.appender.account.append=true
#admin包下的日志输出到admin.log文件中
log4j.appender.account.File=${catalina.home}/logs/ssm-maven/account.log

log4j.appender.user=org.apache.log4j.DailyRollingFileAppender
log4j.appender.user.layout=org.apache.log4j.PatternLayout
log4j.appender.user.layout.ConversionPattern= [%d{HH\:mm\:ss}] %c{1} - %m%n
log4j.appender.user.datePattern='.'yyyy-MM-dd
log4j.appender.user.Threshold = INFO
log4j.appender.user.append=true
#admin包下的日志输出到service.log文件中
log4j.appender.user.File=${catalina.home}/logs/ssm-maven/user.log

log4j.logger.debug=debug
log4j.appender.debug=org.apache.log4j.DailyRollingFileAppender
log4j.appender.debug.layout=org.apache.log4j.PatternLayout
log4j.appender.debug.layout.ConversionPattern= [%d{HH\:mm\:ss}] %c{1} - %m%n
log4j.appender.debug.datePattern='.'yyyy-MM-dd
log4j.appender.debug.Threshold = DEBUG
log4j.appender.debug.append=true
log4j.appender.debug.File=${catalina.home}/logs/ssm-maven/debug.log

log4j.logger.java.sql.ResultSet=INFO
log4j.logger.org.apache=INFO
log4j.logger.java.sql.Connection=DEBUG
log4j.logger.java.sql.Statement=DEBUG
log4j.logger.java.sql.PreparedStatement=DEBUG

######################################################################## 
######################################################################## 
########################################################################

#Loggers日志信息的优先级
#	ERROR、WARN、 INFO、DEBUG
#
#Appenders,日志信息的输出目的地
#	org.apache.log4j.ConsoleAppender （控制台)
#	org.apache.log4j.FileAppender （文件）
#	org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件,本文中的案例选择的策略）
#	org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件，也是一个不错的选择）
#	org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）
#
#Layouts,日志信息的输出格式
#输出格式的功能是控制日志信息的显示内容，参数如下：
#	org.apache.log4j.HTMLLayout（以HTML表格形式布局)
#	org.apache.log4j.PatternLayout（可以灵活地指定布局模式，本案例所选择的策略，需对日志格式进行设置）
#	org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串)
#	org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）
#
#

